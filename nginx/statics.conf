# use brotli module for best compression
# (but leaving it out for simplicity since you can't use the nginx images with it (have to install both manually to link properly))

# checks for gzipped assets first when trying to send, so they don't need to be gzipped on the fly
gzip_static on;
# gzipping your static content at build time is the best option, but if not, dynamic compression is still worth it
gzip on;
gzip_types
  # text/html # on by default
  text/plain text/css text/js text/xml text/javascript;
# requires 'Content-Length' response header to be set
gzip_min_length 1000;
# must set this when receiving a proxied request (disable if proxy is a CDN that wants un-compressed files for caching)
gzip_proxied any;

root /;
# - 'root [path]' maps to a root dir in the local file system (can be defined at virtual server level too)
# - 'alias' is like 'root', except that instead of appending the path to 'root' the path is replaced by 'alias'
# - 'proxy_pass [address/domain]' passes the request to the proxied server domain
#   (providing a URL with a path instead of a bare address/domain replaces the location match segment with the path in the URL,
#    e.g., http://example.com/static/img1.png could proxy to http://127.0.0.1:8000/img1.png)
# - 'rewrite [regex to match] [regex to output] [optional last/break]' rewrites the URL
#    and 'last' re-matches against the new URL and 'break' stops any later rewrites and performs no re-matching
# - 'sub_filter [prefix] [replace]' performs a simple replacement
#   ('sub_filter_once on' makes the replacement only applied once within the URL for the first match)
# - 'error_page [substitute code] =[actual code] [default page html path]'
# - 'try_files [path to match] [fallback path or @[named_location] or =error_code]'

# cache for a year (statics will be cache busted if they change) and no-transform to prevent proxies
# from decompressing and recompressing (fly.io seems to be overriding with zstd though?)
add_header Cache-Control "no-transform, max-age=31536000, immutable";
include /etc/nginx/conf.d/cors.conf;

# allows for sending directly from a file without loading into a buffer
sendfile on;
# should turn on when 'sendfile on'
tcp_nopush on;
# prevents a large file and a fast connection from hogging the worker by downloading the entire file as fast as the file can be sent
sendfile_max_chunk 1m;