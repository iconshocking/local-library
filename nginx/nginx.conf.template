worker_processes auto;
# default for the docker image
user nginx nginx;
# proess ID of the master process, which can be passed signals
pid /var/run/nginx.pid;

error_log /log/error.log warn;

events {
  # Default: 1024
  worker_connections 4096;
}

http {
  log_format real_ip_with_request_id
    '{'
    '"request_id":"$request_id",'
    '"time_iso8601":"$time_iso8601",'
    '"htto_x_forwarded_for":"$http_x_forwarded_for",'
    '"remote_addr":"$remote_addr",'
    '"remote_user":"$remote_user",'
    '"http_host":"$http_host",'
    '"request":"$request",'
    '"status":"$status",'
    '"body_bytes_sent":"$body_bytes_sent",'
    '"request_time":"$request_time",'
    '"request_length":"$request_length",'
    '"http_referrer":"$http_referer",'
    '"http_user_agent":"$http_user_agent",'
    '"request_completion":"$request_completion",'
    '"upstream_bytes_received":"$upstream_bytes_received",'
    '"upstream_connect_time":"$upstream_connect_time",'
    '"upstream_response_length":"$upstream_response_length",'
    '"upstream_response_time":"$upstream_response_time"'
    '}';
  # since this is behind a proxy, we want to log the real address of the client in "X-Forwarded-For" header
  access_log /log/access.log real_ip_with_request_id;

  include mime.types;
  default_type application/octet-stream;

  # fly.io supports http2 ('proxy_pass' does not and converts to HTTP/1.1, but this has less
  # performance benefit on the back channel side since the multiplexing of responses is mostly
  # beneficial just for the client making requests in parallel)
  # - disabling for now in fly_nginx.toml because the debugging is giving me a headache

  upstream django {
    server ${DJANGO_IP}:${DJANGO_PORT};
  }

  server {
    # define no 'server_name', so if no host match (crawler or something hitting the server via raw
    # IP or wrong host), close the connection
    listen ${NGINX_LISTEN_PORT} default_server;
    return 444;
  }

  server {
    server_name static.playground.fly-io.cshock.tech;
    listen ${NGINX_LISTEN_PORT};
    include /etc/nginx/conf.d/statics.conf;
  }

  # redirect www to non-www
  server {
    server_name www.playground.fly-io.cshock.tech;
    listen ${NGINX_LISTEN_PORT};
    return 301 https://playground.fly-io.cshock.tech$request_uri;
  }

  # Preprod hosting from different port to reveal CORS issues
  server {
    server_name 127.0.0.1;
    listen 81;
    location /statics/ {
      include /etc/nginx/conf.d/statics.conf;
    }
    include /etc/nginx/conf.d/user-media.conf;
  }

  server {
    # HTTPS redirect on prod handled by fly.io
    listen ${NGINX_LISTEN_PORT} backlog=4096;
    server_name playground.fly-io.cshock.tech
      cshock-library-nginx.fly.dev
      127.0.0.1;

    location / {
      # do NOT set 'gzip_proxied' for these proxied HTML responses because that makes them vulnerable to BREACH

      # by default, 'proxy_pass' sets Host header to $proxy_host, 'Connection' header to 'close', and clears empty headers
      proxy_pass http://django;
      # Django doesn't need to know it's being proxied, and it makes it easier to set allowable hosts
      proxy_set_header Host $host;
      proxy_pass_request_headers on;
      # 1.1 required for fly.io machines (though doesn't seem to be the case since we don't get 502s...?)
      proxy_http_version 1.1;

      # django CSRF token masking mititgates BREACH attacks, so we can enable compression on HTML responses
      gzip on;
      # requires 'Content-Length' response header to be set
      gzip_min_length 1000;
      # set this when receiving a proxied request (disable if proxy is a CDN that wants un-compressed files for caching)
      gzip_proxied any;

      # don't cache and set private for extra clarity
      add_header Cache-Control "no-transform, no-store, private";

      # 'X-Forwarded-Proto' is already provided by fly.io, so no need to set it
      proxy_set_header X-Real-IP $http_fly_client_id;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $http_host;
      proxy_set_header X-Request-Id $request_id;

      # replaces the 'Location' header in a proxied server's redirect response to remove the internal network part of the URL
      # ('default' strips 'proxy_pass' value + 'location' value; e.g., '127.0.0.1:8000/index/' becomes 'index/',
      # which is fine because Location header supports relative URLs.)
      proxy_redirect default;
      client_max_body_size 4M;
    }
  }
}